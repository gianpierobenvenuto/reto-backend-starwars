{
  "service": {
    "service": "reto-backend-starwars",
    "serviceObject": {
      "name": "reto-backend-starwars"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "memorySize": 128,
      "timeout": 10,
      "environment": {
        "DYNAMO_TABLE": "reto-backend-starwars-dev-fusionadosTable",
        "WEATHER_API_KEY": "edcfd734b6ec4a8de3bb64b5d9d53de6",
        "JWT_SECRET": "reto_backend_starwars_rimac_1234567890"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:Scan"
              ],
              "Resource": "arn:aws:dynamodb:us-east-1:*:table/reto-backend-starwars-dev-fusionadosTable"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "DocsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-backend-starwars-dev-docs"
            }
          },
          "FusionadosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-backend-starwars-dev-fusionados"
            }
          },
          "AlmacenarLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-backend-starwars-dev-almacenar"
            }
          },
          "HistorialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-backend-starwars-dev-historial"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "reto-backend-starwars",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-backend-starwars-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-backend-starwars-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "reto-backend-starwars",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "DocsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-90883ee2-c791",
                "S3Key": "serverless/reto-backend-starwars/dev/1747515220213-2025-05-17T20:53:40.213Z/reto-backend-starwars.zip"
              },
              "Handler": "src/handlers/docs.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-backend-starwars-dev-docs",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DYNAMO_TABLE": "reto-backend-starwars-dev-fusionadosTable",
                  "WEATHER_API_KEY": "edcfd734b6ec4a8de3bb64b5d9d53de6",
                  "JWT_SECRET": "reto_backend_starwars_rimac_1234567890",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DocsLogGroup"
            ]
          },
          "FusionadosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-90883ee2-c791",
                "S3Key": "serverless/reto-backend-starwars/dev/1747515220213-2025-05-17T20:53:40.213Z/reto-backend-starwars.zip"
              },
              "Handler": "src/handlers/fusionados.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-backend-starwars-dev-fusionados",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DYNAMO_TABLE": "reto-backend-starwars-dev-fusionadosTable",
                  "WEATHER_API_KEY": "edcfd734b6ec4a8de3bb64b5d9d53de6",
                  "JWT_SECRET": "reto_backend_starwars_rimac_1234567890",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FusionadosLogGroup"
            ]
          },
          "AlmacenarLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-90883ee2-c791",
                "S3Key": "serverless/reto-backend-starwars/dev/1747515220213-2025-05-17T20:53:40.213Z/reto-backend-starwars.zip"
              },
              "Handler": "src/handlers/almacenar.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-backend-starwars-dev-almacenar",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DYNAMO_TABLE": "reto-backend-starwars-dev-fusionadosTable",
                  "WEATHER_API_KEY": "edcfd734b6ec4a8de3bb64b5d9d53de6",
                  "JWT_SECRET": "reto_backend_starwars_rimac_1234567890",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AlmacenarLogGroup"
            ]
          },
          "HistorialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-90883ee2-c791",
                "S3Key": "serverless/reto-backend-starwars/dev/1747515220213-2025-05-17T20:53:40.213Z/reto-backend-starwars.zip"
              },
              "Handler": "src/handlers/historial.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "reto-backend-starwars-dev-historial",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DYNAMO_TABLE": "reto-backend-starwars-dev-fusionadosTable",
                  "WEATHER_API_KEY": "edcfd734b6ec4a8de3bb64b5d9d53de6",
                  "JWT_SECRET": "reto_backend_starwars_rimac_1234567890",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HistorialLogGroup"
            ]
          },
          "DocsLambdaVersionO5jSNsMKpMLZHOLwNUZgBbcoGGbGOY1SmaYPvfH9Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DocsLambdaFunction"
              },
              "CodeSha256": "qXHnPYEHmUjTsMJXZUMtEqoIOVr3Y2cIYZldL9B3odo="
            }
          },
          "FusionadosLambdaVersionxB5fIgmVIuHUCA0qMkDB1LG7bNgINQzl1hUQAJ9fQI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FusionadosLambdaFunction"
              },
              "CodeSha256": "qXHnPYEHmUjTsMJXZUMtEqoIOVr3Y2cIYZldL9B3odo="
            }
          },
          "AlmacenarLambdaVersionZgaAjG0gSeZkh0L6Ej9ezK9zgtinPZPxsnZaZGl8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AlmacenarLambdaFunction"
              },
              "CodeSha256": "qXHnPYEHmUjTsMJXZUMtEqoIOVr3Y2cIYZldL9B3odo="
            }
          },
          "HistorialLambdaVersion8uIRIB5JpJMOyI99DxQk4mrSfK1Sfc6V3g8L7NQQKSk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HistorialLambdaFunction"
              },
              "CodeSha256": "qXHnPYEHmUjTsMJXZUMtEqoIOVr3Y2cIYZldL9B3odo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-reto-backend-starwars",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceDocs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "docs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDocsProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDocs"
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAssetVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{asset+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFaviconico": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "favicon.ico",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFusionados": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "fusionados",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlmacenar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "almacenar",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHistorial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "historial",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFusionadosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFusionados"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAlmacenarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlmacenar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHistorialOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHistorial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDocsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDocs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DocsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DocsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDocsProxyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDocsProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DocsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DocsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAssetVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAssetVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DocsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DocsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFaviconicoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFaviconico"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DocsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DocsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFusionadosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFusionados"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FusionadosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FusionadosLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAlmacenarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlmacenar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AlmacenarLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AlmacenarLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHistorialGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHistorial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HistorialLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HistorialLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1747515212162": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodFusionadosOptions",
              "ApiGatewayMethodAlmacenarOptions",
              "ApiGatewayMethodHistorialOptions",
              "ApiGatewayMethodDocsGet",
              "ApiGatewayMethodDocsProxyVarGet",
              "ApiGatewayMethodAssetVarGet",
              "ApiGatewayMethodFaviconicoGet",
              "ApiGatewayMethodFusionadosGet",
              "ApiGatewayMethodAlmacenarPost",
              "ApiGatewayMethodHistorialGet"
            ]
          },
          "DocsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DocsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FusionadosLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FusionadosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AlmacenarLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AlmacenarLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HistorialLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HistorialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FusionadosTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "reto-backend-starwars-dev-fusionadosTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-90883ee2-c791",
            "Export": {
              "Name": "sls-reto-backend-starwars-dev-ServerlessDeploymentBucketName"
            }
          },
          "DocsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DocsLambdaVersionO5jSNsMKpMLZHOLwNUZgBbcoGGbGOY1SmaYPvfH9Y"
            },
            "Export": {
              "Name": "sls-reto-backend-starwars-dev-DocsLambdaFunctionQualifiedArn"
            }
          },
          "FusionadosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FusionadosLambdaVersionxB5fIgmVIuHUCA0qMkDB1LG7bNgINQzl1hUQAJ9fQI"
            },
            "Export": {
              "Name": "sls-reto-backend-starwars-dev-FusionadosLambdaFunctionQualifiedArn"
            }
          },
          "AlmacenarLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AlmacenarLambdaVersionZgaAjG0gSeZkh0L6Ej9ezK9zgtinPZPxsnZaZGl8"
            },
            "Export": {
              "Name": "sls-reto-backend-starwars-dev-AlmacenarLambdaFunctionQualifiedArn"
            }
          },
          "HistorialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HistorialLambdaVersion8uIRIB5JpJMOyI99DxQk4mrSfK1Sfc6V3g8L7NQQKSk"
            },
            "Export": {
              "Name": "sls-reto-backend-starwars-dev-HistorialLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-reto-backend-starwars-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "documentation": {
        "version": "1.0.0",
        "title": "Star Wars Weather API - Reto Rimac",
        "description": "API que fusiona datos de SWAPI con OpenWeather y permite almacenamiento personalizado. Desarollado por Gianpiero Benvenuto.",
        "models": [
          {
            "name": "Fusionado",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "planetName": {
                  "type": "string"
                },
                "climate": {
                  "type": "string"
                },
                "population": {
                  "type": "string"
                },
                "weather": {
                  "type": "object",
                  "properties": {
                    "temperatureC": {
                      "type": "number"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                },
                "timestamp": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "AlmacenarRequest",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Identificador único del item (obligatorio)"
                },
                "name": {
                  "type": "string",
                  "description": "Nombre del item (opcional)"
                },
                "description": {
                  "type": "string",
                  "description": "Descripción del item (opcional)"
                }
              }
            }
          },
          {
            "name": "AlmacenarResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Item almacenado exitosamente"
                },
                "item": {
                  "$ref": "#/components/schemas/AlmacenarRequest"
                }
              }
            }
          },
          {
            "name": "ErrorResponse",
            "contentType": "application/json",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error en los datos enviados"
                }
              }
            }
          }
        ],
        "paths": [
          {
            "path": "/fusionados",
            "method": "get",
            "description": "Devuelve datos combinados de Star Wars y clima actual.",
            "tags": [
              "Datos Fusionados"
            ],
            "request": {
              "parameters": {
                "querystrings": {
                  "planet": {
                    "required": true,
                    "type": "string"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "bodyType": "Fusionado"
              },
              "400": {
                "bodyType": "ErrorResponse"
              },
              "500": {
                "bodyType": "ErrorResponse"
              }
            }
          },
          {
            "path": "/almacenar",
            "method": "post",
            "description": "Permite almacenar un ítem personalizado en la base de datos.",
            "tags": [
              "Almacenamiento"
            ],
            "request": {
              "schemas": {
                "application/json": "AlmacenarRequest"
              }
            },
            "responses": {
              "201": {
                "bodyType": "AlmacenarResponse"
              },
              "400": {
                "bodyType": "ErrorResponse"
              },
              "401": {
                "bodyType": "ErrorResponse"
              },
              "500": {
                "bodyType": "ErrorResponse"
              }
            }
          },
          {
            "path": "/historial",
            "method": "get",
            "description": "Devuelve el historial de respuestas fusionadas almacenadas.",
            "tags": [
              "Almacenamiento"
            ],
            "request": {
              "parameters": {
                "querystrings": {
                  "limit": {
                    "required": false,
                    "type": "number"
                  },
                  "lastKey": {
                    "required": false,
                    "type": "string"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "bodyType": "Fusionado"
              },
              "400": {
                "bodyType": "ErrorResponse"
              },
              "401": {
                "bodyType": "ErrorResponse"
              },
              "500": {
                "bodyType": "ErrorResponse"
              }
            }
          }
        ]
      }
    },
    "plugins": [
      "serverless-openapi-documenter"
    ],
    "pluginsData": {},
    "functions": {
      "docs": {
        "handler": "src/handlers/docs.handler",
        "events": [
          {
            "http": {
              "path": "docs",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "docs/{proxy+}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "{asset+}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "favicon.ico",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "reto-backend-starwars-dev-docs",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DocsLambdaVersionO5jSNsMKpMLZHOLwNUZgBbcoGGbGOY1SmaYPvfH9Y"
      },
      "fusionados": {
        "handler": "src/handlers/fusionados.handler",
        "events": [
          {
            "http": {
              "path": "fusionados",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "reto-backend-starwars-dev-fusionados",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "FusionadosLambdaVersionxB5fIgmVIuHUCA0qMkDB1LG7bNgINQzl1hUQAJ9fQI"
      },
      "almacenar": {
        "handler": "src/handlers/almacenar.handler",
        "events": [
          {
            "http": {
              "path": "almacenar",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "reto-backend-starwars-dev-almacenar",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "AlmacenarLambdaVersionZgaAjG0gSeZkh0L6Ej9ezK9zgtinPZPxsnZaZGl8"
      },
      "historial": {
        "handler": "src/handlers/historial.handler",
        "events": [
          {
            "http": {
              "path": "historial",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "reto-backend-starwars-dev-historial",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "HistorialLambdaVersion8uIRIB5JpJMOyI99DxQk4mrSfK1Sfc6V3g8L7NQQKSk"
      }
    },
    "resources": {
      "Resources": {
        "FusionadosTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "reto-backend-starwars-dev-fusionadosTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "reto-backend-starwars",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "patterns": [
          "node_modules/swagger-ui-dist/**",
          "openapi.json"
        ],
        "artifactsS3KeyDirname": "serverless/reto-backend-starwars/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-90883ee2-c791",
        "artifact": "E:\\OneDrive - Just Great Systems\\Desktop\\Softtek\\Reto\\reto-backend-starwars\\.serverless\\build\\reto-backend-starwars.zip",
        "artifactDirectoryName": "serverless/reto-backend-starwars/dev/1747515220213-2025-05-17T20:53:40.213Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/reto-backend-starwars/dev/1747515220213-2025-05-17T20:53:40.213Z",
    "artifact": "reto-backend-starwars.zip"
  }
}